Knuth's optimisation:
+ mostly used in dp[l][r] (dp interval on array)
+ O(n^3) ---> O(n^2)
+ dp formula must be: dp[i][j] = min_{k=i+1}^{j-1}(dp[i][k] + dp[k][j]) + C[i][j]
+ A[i][j] = smallest k, which dp[i][j] = dp[i][k] + dp[k][j] + C[i][j] (k is one of answers)
+ Conditions:
	- A[i][j-1] <= A[i][j] <= A[i+1][j]
	- (a<=b<=c<=d)
	- C[a][c] + C[b][d] <= C[a][d] + C[b][c]
	- C[b][c] <= C[a][d]
+ Operation:
	- Check all k's between A[i][j-1] and A[i+1][j]

Phi:
+ phi(n) = Number of 1<=k<=n which gcd(k, n) == 1
+ phi(n) = n * (1 - 1/p1) * (1 - 1/p2) * ... (1 - 1/pt)
+ sum_(d|n) (phi(d)) = n
+ Properties:
	- a|b ==> phi(a)|phi(b)
	- phi(n*m) = phi(m) * phi(n) * d/phi(d) where d = gcd(n, m)

Carmichael function:
+ h(n) = minimum m which for all a, a^m mod n = 1
+ h(n) = lcm(h(p1^r1), h(p2^r2), ..., h(pk^rk))
+ h(p^r) = p^(r-1) * (p-1) for p > 2
+ h(2^r) = 2^(r-2) for r >= 3
+ Properties:
	- If a^m mod n == 1 then m | h(n)
	- h(n) = max(ord_n(a) for all a where gcd(a, n) == 1)
	- h(n) | phi(n)
	- from 1 to p^r there is phi(h(p^r)) number like x where ord(x) == h(p^r)
	- last statement may be true for all n instead of p^r

Divide and conquer optimization in dp:
+ mostly used in dp[i][j] (i events happened from 1 to j)
+ O(mn^2) ---> O(mn*lgn)
+ dp formula must be: dp[i][j] = min_{k<j}(dp[i-1][k] + C[k+1][j])
+ A[i][j] = smallest k which satisfies dp formula.
+ Condition:
	- A[i][j] <= A[i][j+1]
+ Operation:
	- Use divide and conquer for caculating all dp[i].
	- ComputeDP(i, jleft, jright, kleft, kright)

Xor graph:
+ Consider dfs graph, for each back-edge e, generate a random number t,
+ And xor all edges in cycle which belongs to e with a.
+ Xor of all edges is equal to Xor of all odd cycle length edges.
+ Graph is biparitie if and only if Xor of all edges is 0.
+ If you remove a subset of edges which their xor is equal to xor of all edges, the remaining graph is biparitie. 