#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
typedef tree< int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
s.order_of_key(2) // the number of elements in the s less than 2
*s.find_by_order(0) // print the 0-th smallest number in s(0-based)

// biggest bit: e.g msbf(12) = 3
int msbf(unsigned x) {
	union { double a; int b[2]; };
	a = x;
	return (b[1] >> 20) - 1023;
}
__builtin_clz(x); // leading zeros
__builtin_ctz(x); // trailing zeros
__builtin_popcount(x); // number of ones
__builtin_smulll_overflow(a, b, &product)

str.substr (start: 3, len: 5) // substring: returns str[3-7]

0x57 == 01010111 == 87 // constant in 16-base

cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";

log10l(n) // if n is long long, after nearly 10^15, the function may output 1 more than the real answer.

mt19937_64 eng(time(0)); uniform_int_distribution <long long> distr; // distr(eng)
shuffle(permutation.begin(), permutation.end(), eng); // random shuffle

// comparator for priority_queue
struct MyComp { 
    bool operator()(int const &a, int const &b) {return a.first < b.first} 
}; priority_queue <int, vector<int>, MyComp> q;
struct cmp{
	bool operator()(double a, double b){return a + EPS < b;}
}; map <double, int, cmp> m;

to_string(10) // long long to string
stoll('10') // string to long long
__builtin_smulll_overflow(a, b, &ans) // if (a*b) has overflow -> true and multiply result -> ans.

partial_sum (val, val+5, result); // partial sum goes in result
partial_sum (val, val+5, result, multiplies<int>()); // partial multiply
int myop (int x, int y) {return x+y+1;}
partial_sum (val, val+5, result, myop); // custom partial function
priority_queue<int, vector<int>, greater<int>> pq(myints, myints+4);

rotate(s[j].rbegin(), s[j].rbegin() + 1, s[j].rend()); // 1 rotate right

typedef __int128 ll128; // can not be inputed

set <pair<ll, array<int, 3>>> pq;

vector <int> v(10);
iota(v.begin(), v.end(), -4);
v.insert(v.end(), v2.begin(), v2.end()) // insert vector in vector
is_sorted(all(v)); // returns boolean tells if v is sorted or not

ostream& operator<<(ostream& out, const Rule& r) { // this should be outside the "Rule" struct
	for(auto u : r.is) out << u << ' ';
	out << endl;
	return out;
}

struct Segment {
	Point p[2];
	Point& operator[](int i) { return p[i]; } // this should be inside the Segment struct
}

auto glambda = [&](auto a, auto&& b) { return a < b; };

sum = accumulate(v.begin(),v.end(),0LL); // long long accumulation

// string stream or sstream
string inp; getline(cin, inp);
stringstream fin(inp); int x;
while(fin >> x);
